/*
 * Copyright 2019 Random Logic Consulting Services and Paul G. Allen. All rights reserved.
 */
package com.randomlogic.rlpay.model.domain.company.entity;
// Generated Jan 7, 2019 10:43:39 AM by Hibernate Tools 4.3.1


import java.io.Serializable;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Authorization generated by hbm2java
 */
@Entity
@Table
(
    name="authorization",
    catalog="rlapi",
    uniqueConstraints = @UniqueConstraint (columnNames = "idAuthorization")
)
public class Authorization implements Serializable
{
     private AuthorizationId id;
     private byte valid;
////     private Set users = new HashSet(0);

    public Authorization()
    {
    }

    public Authorization (AuthorizationId id, byte valid)
    {
        this.id = id;
        this.valid = valid;
    }

////    public Authorization (AuthorizationId id, byte valid, Set users)
////    {
////       this.id = id;
////       this.valid = valid;
////       this.users = users;
////    }

    @EmbeddedId
    @AttributeOverrides( {
        @AttributeOverride(name="idAuthorization", column=@Column(name="idAuthorization", unique=true, nullable=false) ),
        @AttributeOverride(name="method", column=@Column(name="method", nullable=false) ) } )
    public AuthorizationId getId()
    {
        return this.id;
    }

    public void setId (AuthorizationId id)
    {
        this.id = id;
    }

    @Column(name="valid", nullable=false)
    public byte getValid()
    {
        return this.valid;
    }

    public void setValid (byte valid)
    {
        this.valid = valid;
    }

////    @ManyToMany(fetch=FetchType.EAGER)
////    @JoinTable(name="user_has_authorization", catalog="dccapi", joinColumns = {
////        @JoinColumn(name="Authorization_idAuthorization", nullable=false, updatable=false),
////        @JoinColumn(name="Authorization_method", nullable=false, updatable=false) }, inverseJoinColumns = {
////        @JoinColumn(name="User_idUser", nullable=false, updatable=false) })
////    public Set getUsers()
////    {
////        return this.users;
////    }
////
////    public void setUsers (Set users)
////    {
////        this.users = users;
////    }
}


